---
- name: run ec2
  hosts: localhost
  tasks:
    - name: Generate an OpenSSH keypair with the default values (4096 bits, rsa)
      community.crypto.openssh_keypair:
        path: "{{ ssh_key_file }}"
        force: yes
      register: ssh_path

    - name: print ssh key path
      ansible.builtin.debug:
        msg: "{{ ssh_path }}"

    - name: create key pair using key_material obtained using 'file' lookup plugin
      amazon.aws.ec2_key:
        name: "{{ ec2_key_name }}"
        key_material: "{{ lookup('file', '{{ ssh_path.filename }}.pub') }}"

    - name: Facts about default VPC
      amazon.aws.ec2_vpc_net_info:
        filters:
          isDefault: "true"
      register: vpc_net_find

    - name: Facts about default VPC subnet
      amazon.aws.ec2_vpc_subnet_info:
        filters:
          vpc-id: "{{vpc_net_find.vpcs[0].vpc_id}}"
      register: vpc_subnet_find

    - name: print vpc subnet info
      ansible.builtin.debug:
        msg: "{{ vpc_subnet_find }}"

    - name: Gather information about all Internet Gateways for an account or profile
      community.aws.ec2_vpc_igw_info:
      register: igw_info

    - name: print internet gateway info
      ansible.builtin.debug:
        msg: "{{ igw_info }}"

    - name: Create new nat gateway using an allocation-id.
      community.aws.ec2_vpc_nat_gateway:
        state: present
        subnet_id: "{{vpc_subnet_find.subnets[0].id}}"
        wait: yes
        if_exist_do_not_create: yes
      register: new_nat_gateway

    - name: print NAT gateway info
      ansible.builtin.debug:
        msg: "{{ new_nat_gateway }}"

    - name: Set up the public subnet route table
      community.aws.ec2_vpc_route_table:
        vpc_id: "{{vpc_net_find.vpcs[0].vpc_id}}"
        tags:
          Name: Public
        subnets: "{{ vpc_subnet_find.subnets[0].id }}"
        routes:
          - dest: '0.0.0.0/0'
            gateway_id: "{{ igw_info.internet_gateways[0].internet_gateway_id }}"
      register: result_public_route

    - name: print subnet route table info
      ansible.builtin.debug:
        msg: "{{ result_public_route }}"
        
    - name: Set up private subnet route table
      ec2_vpc_route_table:
        vpc_id: "{{ vpc_net_find.vpcs[0].vpc_id }}"
        tags:
          Name: Private
        subnets: "{{ vpc_subnet_find.subnets[1].id }}"
        routes:
          - dest: '0.0.0.0/0'
            gateway_id: "{{ new_nat_gateway.nat_gateway_id }}"
      register: result_private_route

    - name: find ami
      amazon.aws.ec2_ami_info:
        image_ids: ami-0794bfa4791737d52
      register: ami_find

    - name: ec2 security group
      amazon.aws.ec2_group:
        name: "{{ ec2_group_name }}"
        description: Base Security Group
        vpc_id: "{{vpc_net_find.vpcs[0].vpc_id}}"
        rules:
          - proto: tcp
            from_port: 10250
            to_port: 10250
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 6443
            to_port: 6443
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: icmp
            from_port: 0
            to_port: 0
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
    - name: Launch Master Node
      amazon.aws.ec2:
        image: "{{ ami_find.images[0].image_id }}"
        instance_type: "{{ instance_type }}"
        instance_tags: 
          Name: Master
        key_name: "{{ ec2_key_name }}" 
        vpc_subnet_id: "{{vpc_subnet_find.subnets[0].id}}"
        group: "{{ ec2_group_name }}"
        count_tag:
          Name: Master
        exact_count: 1
        assign_public_ip: yes
        wait: yes
      register: created_instances_master

    - name: master node 機器資訊
      ansible.builtin.debug:
        msg: "{{ created_instances_master }}"

    - name: Launch Worker Node
      amazon.aws.ec2:
        image: "{{ ami_find.images[0].image_id }}"
        instance_type: "{{ instance_type }}"
        instance_tags: 
          Name: Worker
        key_name: "{{ ec2_key_name }}" 
        vpc_subnet_id: "{{vpc_subnet_find.subnets[1].id}}"
        group: "{{ ec2_group_name }}"
        count_tag:
          Name: Worker
        exact_count: 2
        assign_public_ip: no
        wait: yes
      register: created_instances

    - name: worker node 機器資訊
      ansible.builtin.debug:
        msg: "{{ created_instances }}"
